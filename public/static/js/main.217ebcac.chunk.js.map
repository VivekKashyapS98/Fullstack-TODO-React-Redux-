{"version":3,"sources":["Todo.js","newTodo.js","TodoList.js","actionCreators.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["Todo","task","remove","title","type","value","onClick","_id","newTodo","props","state","todo","e","this","setState","target","preventDefault","handleAdd","history","push","onSubmit","handleSubmit","htmlFor","name","id","onChange","handleChange","Component","TodoList","getTodo","val","addTodo","removeTodo","todos","map","key","path","render","exact","component","connect","reduxState","dispatch","fetch","then","data","json","catch","err","console","log","method","headers","Headers","body","JSON","stringify","handleCreate","handleRemove","App","className","to","Boolean","window","location","hostname","match","initialState","store","createStore","action","filter","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yRASeA,EAPF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,OAAR,OACT,4BACKD,EAAKE,MACN,2BAAOC,KAAK,SAASC,MAAM,IAAIC,QAAS,kBAAMJ,EAAOD,EAAKM,UCH7CC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,IAHK,E,yDAONC,GACTC,KAAKC,SAAS,CAACH,KAAMC,EAAEG,OAAOV,U,mCAGrBO,GACTA,EAAEI,iBACFH,KAAKJ,MAAMQ,UAAUJ,KAAKH,MAAMC,MAChCE,KAAKC,SAAS,CAACH,KAAM,KACrBE,KAAKJ,MAAMS,QAAQC,KAAK,Y,+BAGlB,IAAD,OACL,OACI,0BAAMC,SAAU,SAACR,GAAD,OAAO,EAAKS,aAAaT,KACrC,2BAAOU,QAAQ,QAAf,SACA,2BAAOlB,KAAK,OAAOmB,KAAK,OAAOC,GAAG,OAAOnB,MAAOQ,KAAKH,MAAMC,KAAMc,SAAU,SAACb,GAAD,OAAO,EAAKc,aAAad,MACpG,2BAAOR,KAAK,SAASC,MAAM,kB,GAxBNsB,a,mBCK/BC,E,kLAEEf,KAAKJ,MAAMoB,Y,gCAGLC,GACNjB,KAAKJ,MAAMsB,QAAQD,K,iCAGZN,GACPX,KAAKJ,MAAMuB,WAAWR,K,+BAGhB,IAAD,OACDS,EAAQpB,KAAKJ,MAAMwB,MAAMC,KAAI,SAACjC,GAAD,OAAU,kBAAC,EAAD,CAAMA,KAAMA,EAAMkC,IAAKlC,EAAKM,IAAKL,OAAQ,SAACsB,GAAD,OAAQ,EAAKQ,WAAWR,SAC5G,OACI,6BACI,kBAAC,IAAD,CAAOY,KAAK,aAAaC,OAAQ,SAAA5B,GAAK,OAClC,kBAAC,EAAD,iBAAaA,EAAb,CAAoBQ,UAAW,SAAAa,GAAG,OAAI,EAAKb,UAAUa,UAEzD,kBAAC,IAAD,CAAOQ,OAAK,EAACF,KAAK,SAASG,UAAW,kBAAM,4BAAKN,W,GApB1CN,aAgCRa,mBANf,SAAyBC,GACrB,MAAO,CACHR,MAAOQ,EAAWR,SAIc,CAAEJ,QCbnC,WACH,OAAO,SAAAa,GACHC,MAAM,mCACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIH,EAxBf,CACHtC,KALgB,WAMhBO,KAsBsCkC,OACjCE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,yBAA0BF,QDQbjB,QCJ5C,SAAiB9B,GACpB,OAAO,SAAAyC,GACHC,MAAM,kCAAmC,CACrCQ,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,qBAEpBC,KAAMC,KAAKC,UAAU,CAACrD,MAAOF,MAC9B2C,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIH,EAhCxB,SAAsBzC,GAClB,MAAO,CACHG,KAdgB,WAehBH,QA6ByBwD,CAAaZ,OACnCE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,yBAA0BF,QDNFhB,WCUrD,SAAoBR,GACvB,OAAO,SAAAkB,GACHC,MAAM,mCAAD,OAAoCnB,GAAM,CAC3C2B,OAAQ,WACTP,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,kBAAMF,EAnCtB,SAAsBlB,GAClB,MAAO,CACHpB,KApBmB,cAqBnBoB,MAgCuBkC,CAAalC,OACjCuB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,yBAA0BF,SDhB/CR,CAA2DZ,G,aEnB3D+B,MAff,WACE,OACE,yBAAKC,UAAU,OACb,6BACI,gCACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,SAA8B,6BAC9B,kBAAC,IAAD,CAAMA,GAAG,cAAT,oBAEJ,kBAAC,IAAD,CAAOzB,KAAK,SAASG,UAAWX,IAChC,kBAAC,IAAD,CAAOU,OAAK,EAACF,KAAK,IAAIC,OAAQ,kBAAK,kBAAC,IAAD,CAAUwB,GAAG,iBCFpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBAC,EAAe,CACjBlC,MAAO,I,YCQLmC,EAAQC,aDLC,WAAkD,IAA7B3D,EAA4B,uDAAtByD,EAAcG,EAAQ,uCAC5D,OAAOA,EAAOlE,MACV,IHNgB,WGOZ,OAAO,2BACAM,GADP,IAEIuB,MAAOqC,EAAO3D,OAEtB,IHbgB,WGcZ,MAAO,CACHsB,MAAM,GAAD,mBAAMvB,EAAMuB,OAAZ,CAAmBqC,EAAOrE,QAEvC,IHhBmB,cGiBf,MAAO,CACHgC,MAAOvB,EAAMuB,MAAMsC,QAAO,SAAAzC,GAAG,OAAIA,EAAIvB,MAAQ+D,EAAO9C,OAE5D,QACI,OAAOd,KCVX8D,YACEC,YAAgBC,KAChBX,OAAOY,8BAAgCZ,OAAOY,iCAIxDC,IAASvC,OACL,kBAAC,IAAD,CAAU+B,MAAOA,GACjB,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFS,SAASC,eAAe,SF2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.217ebcac.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({task, remove}) => (\n    <li>\n        {task.title}\n        <input type=\"button\" value=\"X\" onClick={() => remove(task._id)} />\n    </li>\n);\n\nexport default Todo;","import React, { Component } from 'react';\n\nexport default class newTodo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todo: \"\"\n        }\n    }\n\n    handleChange(e) {\n        this.setState({todo: e.target.value});\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleAdd(this.state.todo);\n        this.setState({todo: \"\"});\n        this.props.history.push(\"/todos\");\n    }\n\n    render() {\n        return (\n            <form onSubmit={(e) => this.handleSubmit(e)}>\n                <label htmlFor=\"todo\">Todo:</label>\n                <input type=\"text\" name=\"todo\" id=\"todo\" value={this.state.todo} onChange={(e) => this.handleChange(e)} />\n                <input type=\"submit\" value=\"Add Todo\" />\n            </form>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodo from './newTodo';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { getTodo, addTodo, removeTodo } from './actionCreators';\n\nclass TodoList extends Component{\n    componentDidMount() {\n        this.props.getTodo();\n    }\n\n    handleAdd(val) {\n        this.props.addTodo(val);\n    }\n\n    removeTodo(id) {\n        this.props.removeTodo(id);\n    }\n\n    render() {\n        let todos = this.props.todos.map((task) => <Todo task={task} key={task._id} remove={(id) => this.removeTodo(id)} />);\n        return (\n            <div>\n                <Route path=\"/todos/new\" render={props => (\n                    <NewTodo {...props} handleAdd={val => this.handleAdd(val)} />\n                )} />\n                <Route exact path=\"/todos\" component={() => <ul>{todos}</ul>} />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(reduxState) {\n    return {\n        todos: reduxState.todos\n    }\n}\n\nexport default connect(mapStateToProps, { getTodo, addTodo, removeTodo })(TodoList);","export const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const GET_TODO = \"GET_TODO\";\n\n\nfunction handleTodo(todo) {\n    return {\n        type: GET_TODO,\n        todo\n    }\n}\n\nfunction handleCreate(task) {\n    return {\n        type: ADD_TODO,\n        task\n    }\n}\n\nfunction handleRemove(id) {\n    return {\n        type: REMOVE_TODO,\n        id\n    }\n}\n\nexport function getTodo() {\n    return dispatch => {\n        fetch(\"http://localhost:3001/api/todos\")\n            .then(data => data.json())\n            .then(data => dispatch(handleTodo(data)))\n            .catch(err => console.log(\"Something went Wrong: \", err))\n    }\n}\n\nexport function addTodo(task) {\n    return dispatch => {\n        fetch(\"http://localhost:3001/api/todos\", {\n            method: 'POST',\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            }),\n            body: JSON.stringify({title: task})\n        }).then(data => data.json())\n          .then(data => dispatch(handleCreate(data)))\n          .catch(err => console.log(\"Something went Wrong: \", err))\n    }\n}\n\nexport function removeTodo(id) {\n    return dispatch => {\n        fetch(`http://localhost:3001/api/todos/${id}`, {\n            method: 'DELETE'\n        }).then(data => data.json())\n          .then(() => dispatch(handleRemove(id)))\n          .catch(err => console.log(\"Something went Wrong: \", err))\n    }\n}","import React from 'react';\nimport TodoList from './TodoList';\nimport { Link,Route,Redirect } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n          <header>\n            <Link to=\"/todos\">TODOs</Link><br />\n            <Link to=\"/todos/new\">Create new Todo</Link>\n          </header>\n        <Route path=\"/todos\" component={TodoList} />\n        <Route exact path=\"/\" render={() =><Redirect to=\"/todos\" /> } />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_TODO, ADD_TODO, REMOVE_TODO } from './actionCreators';\n\nconst initialState = {\n    todos: [],\n}\n\nexport default function rootReducer(state=initialState, action) {\n    switch(action.type) {\n        case GET_TODO:\n            return {\n                ...state,\n                todos: action.todo\n            };\n        case ADD_TODO:\n            return {\n                todos: [...state.todos, action.task]\n            };\n        case REMOVE_TODO:\n            return {\n                todos: state.todos.filter(val => val._id !== action.id)\n            };\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst store = createStore(rootReducer,\n        compose(\n          applyMiddleware(thunk),\n          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n      );\n\nReactDOM.render(\n    <Provider store={store} >\n    <Router>\n    <App />\n    </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}